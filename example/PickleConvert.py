# This code converts the .pckl files generated by Hydroshoot into .csv files for easier manipulation

from pickle import load
import numpy as np
import pandas as pd
import os
from pathlib import Path


# get a list of the interior-most subdirectories (where the .pckl files are stored) to loop over
root_dir = '/Users/mkbartl/simulation_results'
output_dir = '/Users/mkbartl/simulation_results_csv/'
dir_list = [x[0] for x in os.walk(root_dir)]
list = []

for pathname in dir_list:
    path_len = len(Path(pathname).parts)
    list.append(path_len)

searchval = max(list)
vals = np.array(list)
max_indices=np.where(vals == searchval)

path_list = np.array(dir_list)[max_indices]

# loop over the files
for pathname in path_list:
    new_path = Path(*Path(pathname).parts[-4:]) # create a directory to store the .csv files
    new_path2 = os.path.join(output_dir, new_path)
    os.makedirs(new_path2,exist_ok=True)

    if len(os.listdir(pathname)) > 0: # check if there are any files in each folder
        file_list=os.listdir(pathname)

        for pickle_file in Path(pathname).glob('*.pckl'):
            with open(pickle_file,'rb') as f:       
                g2,_ = load(f)
                f.close()
                g2.add_property('geometry') # I don't think this is doing anything but I'm not sure

                LWP = [g2.node(vid).psi_head for vid in g2.property("gs").keys()]
                RGs = [g2.node(vid).Rg for vid in g2.property("gs").keys()]
                GSs = [g2.node(vid).gs for vid in g2.property("gs").keys()] 
                ANs = [g2.node(vid).An for vid in g2.property("gs").keys()] 
                TLs = [g2.node(vid).Tlc for vid in g2.property("gs").keys()] 
                Lab = [g2.node(vid).label for vid in g2.property("gs").keys()] 
                Positions=[g2.node(vid).TopPosition for vid in g2.property("gs").keys()] 

                LWP2=pd.DataFrame(LWP)
                RG2=pd.DataFrame(RGs)
                GS2=pd.DataFrame(GSs)
                AN2=pd.DataFrame(ANs)
                TL2=pd.DataFrame(TLs)
                Lab=pd.DataFrame(Lab)
                Pos2=pd.DataFrame(Positions)

                df = pd.concat([Lab, Pos2, LWP2, RG2, GS2, AN2, TL2], axis = 1)
                df.columns = ["Label", "X", "Y", "Z", "LWP", "Rg", "gs", "An", "Tleaf"]
                filename = os.path.basename(pickle_file)
                df.to_csv(new_path2 + '/' + f'{filename}.csv', index=False)



#root_dir = '/Users/meganbartlett/simulation_results/rcp85/east_west/baseline'
#output_dir = '/Users/meganbartlett/simulation_results_csv/rcp85/east_west/baseline/'
#os.makedirs(os.path.dirname(output_dir),exist_ok=True)

#for filename in os.listdir(root_dir):
 #   with open(os.path.join(root_dir, filename),'rb') as f:
  #      g2,_ = load(f)
   #     f.close()

#        g2.add_property('geometry')
#
 #       LWP = [g2.node(vid).psi_head for vid in g2.property("gs").keys()]
  #      RGs = [g2.node(vid).Rg for vid in g2.property("gs").keys()]
   #     GSs = [g2.node(vid).gs for vid in g2.property("gs").keys()] 
    #    ANs = [g2.node(vid).An for vid in g2.property("gs").keys()] 
     #   TLs = [g2.node(vid).Tlc for vid in g2.property("gs").keys()] 
      #  Lab = [g2.node(vid).label for vid in g2.property("gs").keys()] 
      #  Positions=[g2.node(vid).TopPosition for vid in g2.property("gs").keys()] 

#        LWP2=pd.DataFrame(LWP)
 #       RG2=pd.DataFrame(RGs)
  #      GS2=pd.DataFrame(GSs)
   #     AN2=pd.DataFrame(ANs)
    #    TL2=pd.DataFrame(TLs)
     #   Lab=pd.DataFrame(Lab)
      #  Pos2=pd.DataFrame(Positions)

#        df = pd.concat([Lab, Pos2, LWP2, RG2, GS2, AN2, TL2], axis = 1)
 #       df.columns = ["Label", "X", "Y", "Z", "LWP", "Rg", "gs", "An", "Tleaf"]
  #      df.to_csv(output_dir + f'{filename}.csv', index=False)



#fg = '/Users/meganbartlett/simulation_results/fresno/historical/north_south/baseline/mtg19900715130000.pckl'
#f = open(fg, 'rb')
#g2,_ = load(f)
#f.close()
#g2.add_property('geometry')

#[g2.node(vid).psi_head for vid in g2.property("gs").keys()] # look at all of the leaf water potentials
#np.median([g2.node(vid).psi_head for vid in g2.property("gs").keys()]) # median LWP
#np.min([g2.node(vid).psi_head for vid in g2.property("gs").keys()]) # minimum LWP
#np.max([g2.node(vid).psi_head for vid in g2.property("gs").keys()]) # maximum LWP
#[g2.node(vid).Ei for vid in g2.property("gs").keys()] # look at intercepted radiation
#list(g2.property("gs").values()) # look at stomatal conductance


# kmin = 0.0001
# -0.8876834584945728
#>>> np.max([g2.node(vid).psi_head for vid in g2.property("gs").keys()]) 
#-0.7608089342986359
#>>> np.min([g2.node(vid).psi_head for vid in g2.property("gs").keys()]) 
#-1.0414974922935687

# kmin = 0.00001
#>>> np.median([g2.node(vid).psi_head for vid in g2.property("gs").keys()])
#-0.9735510250295796
#>>> np.min([g2.node(vid).psi_head for vid in g2.property("gs").keys()])
#-1.6725317332945138
#>>> np.max([g2.node(vid).psi_head for vid in g2.property("gs").keys()]) # maximum LWP
#-0.7537607144045627

#LWP = [g2.node(vid).psi_head for vid in g2.property("gs").keys()]
#RGs = [g2.node(vid).Rg for vid in g2.property("gs").keys()]
#GSs = [g2.node(vid).gs for vid in g2.property("gs").keys()] 
#ANs = [g2.node(vid).An for vid in g2.property("gs").keys()] 
#TLs = [g2.node(vid).Tlc for vid in g2.property("gs").keys()] 
#Lab = [g2.node(vid).label for vid in g2.property("gs").keys()] 
#Positions=[g2.node(vid).TopPosition for vid in g2.property("gs").keys()] 

#LWP2=pd.DataFrame(LWP)
#RG2=pd.DataFrame(RGs)
#GS2=pd.DataFrame(GSs)
#AN2=pd.DataFrame(ANs)
#TL2=pd.DataFrame(TLs)
#Lab=pd.DataFrame(Lab)
#Pos2=pd.DataFrame(Positions)

#df = pd.concat([Lab, Pos2, LWP2, RG2, GS2, AN2, TL2], axis = 1)
#df.columns = ["Label", "X", "Y", "Z", "LWP", "Rg", "gs", "An", "Tleaf"]
#df.to_csv('example.csv', index=False)


